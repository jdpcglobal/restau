import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useRouter } from 'next/router';
import Navbar from '../components/Navbar/Navbar';
import Footer from '../components/Footer/Footer';
import LoginPopup from '../components/LoginPopup/LoginPopup';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faArrowLeft } from '@fortawesome/free-solid-svg-icons';
import PromoCodePopup from '../components/PromoCodepopu/PromoCodePopup';

const CartPage = () => {
  const [error, setError] = useState(null);
  const [showLogin, setShowLogin] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [cartItems, setCartItems] = useState([]);
  const [showPromoPopup, setShowPromoPopup] = useState(false);
  const [appliedCoupon, setAppliedCoupon] = useState(null);
  const router = useRouter();

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      fetchCartItems(token);
      setIsLoggedIn(true);
    } else {
      setShowLogin(true);
    }
  }, []);

  const fetchCartItems = async (token) => {
    try {
      const response = await axios.get('/api/getCartItems', {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.data.success) {
        setCartItems(response.data.cartItems);
      } else {
        setError(response.data.message);
      }
    } catch (error) {
      console.error('Error fetching cart items:', error);
      setError('Error fetching cart items');
    }
  };

  const handleApplyCoupon = (coupon) => {
    setAppliedCoupon(coupon);
    setShowPromoPopup(false);
  };

  const subtotal = cartItems.reduce((total, item) => {
    if (item.foodId) {
      const originalPrice = item.foodId.price;
      const discountAmount = originalPrice * (item.foodId.discount / 100);
      const gstAmount = discountAmount * (item.foodId.gstRate / 100);
      const priceWithGst = discountAmount + gstAmount;
      const itemTotal = priceWithGst * item.quantity;
      return total + itemTotal;
    }
    return total;
  }, 0);

  const couponAvailable = appliedCoupon && subtotal >= appliedCoupon.cartPrice;

  return (
    <>
      {showLogin && !isLoggedIn && (
        <LoginPopup setShowLogin={setShowLogin} setIsLoggedIn={setIsLoggedIn} />
      )}
      <div className='app'>
        <Navbar isLoggedIn={isLoggedIn} setShowLogin={setShowLogin} />
        <div className="cart-page">
          <FontAwesomeIcon icon={faArrowLeft} className="back-arrow-icon" onClick={() => router.back()} />
          <div className='cart-container'>
            <div className='cart-body'>
              {error && <p className='error-message'>{error}</p>}
              {cartItems.length === 0 ? (
                <p>Your cart is empty</p>
              ) : (
                cartItems.map(item => (
                  <div key={item._id} className='cart-item'>
                    {/* Item rendering logic here */}
                  </div>
                ))
              )}
            </div>
            <div className='cart-bottom'>
              <div className='cart-total'>
                <h2>Cart Total</h2>
                <div className='cart-total-details'>
                  <p>Subtotal</p>
                  <p>₹{Math.round(subtotal)}</p>
                </div>
                <hr />
                <div className='cart-total-details'>
                  <b>Total</b>
                  <b>₹{Math.round(subtotal)}</b>
                </div>
              </div>
              <button className='promo-button' onClick={() => setShowPromoPopup(true)}>
                {couponAvailable ? 'Available Coupons' : `Add ₹${appliedCoupon ? appliedCoupon.cartPrice - subtotal : 0} more to avail this offer`}
              </button>
              {appliedCoupon && (
                <div className="applied-coupon">
                  <p>Applied Coupon: {appliedCoupon.code}</p>
                  <button onClick={() => setAppliedCoupon(null)}>Remove Coupon</button>
                </div>
              )}
              <button className='checkout-button' onClick={() => router.push('/Order')}>
                Proceed to Checkout
              </button>
            </div>
          </div>
        </div>
      </div>
      <PromoCodePopup 
        isVisible={showPromoPopup} 
        onClose={() => setShowPromoPopup(false)} 
        onApplyCoupon={handleApplyCoupon} 
        subtotal={subtotal} // Pass subtotal here
      />
    </>
  );
};

export default CartPage;
