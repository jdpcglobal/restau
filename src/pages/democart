import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useRouter } from 'next/router';
import Navbar from '../components/Navbar/Navbar';
import Footer from '../components/Footer/Footer';
import LoginPopup from '../components/LoginPopup/LoginPopup';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faArrowLeft } from '@fortawesome/free-solid-svg-icons';
import '../components/cartpopup/cartpopup.css';
import '../app/globals.css';
import { toast } from 'react-toastify';
import PromoCodePopup from '../components/PromoCodepopu/PromoCodePopup';

const CartPage = () => {
  const [error, setError] = useState(null);
  const [showLogin, setShowLogin] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [cartItems, setCartItems] = useState([]);
  const router = useRouter();
  const [showPromoPopup, setShowPromoPopup] = useState(false);
  const [appliedCoupon, setAppliedCoupon] = useState(null);
  const [loading, setLoading] = useState(false);

  const handlePromoClick = () => {
    setShowPromoPopup(true);
  };

  const handleClosePromoPopup = () => {
    setShowPromoPopup(false);
  };

  const handleApplyCoupon = (coupon) => {
    setAppliedCoupon(coupon);
    setShowPromoPopup(false);
  };

  const handleLogout = () => {
    localStorage.removeItem('token');
    setIsLoggedIn(false);
    setShowLogin(true);
    router.push('/'); // Redirect to the home page
  };

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      fetchCartItems(token);
      setIsLoggedIn(true);
    } else {
      setShowLogin(true);
    }
  }, []);

  const fetchCartItems = async (token) => {
    try {
      const response = await axios.get('/api/getCartItems', {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (response.data.success) {
        setCartItems(response.data.cartItems);
      } else if (response.data.error === 'TokenExpired') {
        handleTokenExpiration();
      } else {
        setError(response.data.message);
      }
    } catch (error) {
      if (error.response && error.response.status === 401) {
        handleTokenExpiration();
      } else {
        console.error('Error fetching cart items:', error);
        setError('Error fetching cart items');
      }
    }
  };

  const updateCartItem = async (itemId, newQuantity) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.put('/api/updateCartItem',
        { itemId, quantity: newQuantity },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      if (response.data.success) {
        setCartItems(prevItems => prevItems.map(item =>
          item._id === itemId ? { ...item, quantity: newQuantity } : item
        ));
      } else if (response.data.error === 'TokenExpired') {
        handleTokenExpiration();
      } else {
        setError(response.data.message);
      }
    } catch (error) {
      if (error.response && error.response.status === 401) {
        handleTokenExpiration();
      } else {
        console.error('Error updating cart item:', error);
        setError('Error updating cart item');
      }
    }
  };

  const handleRemoveClick = async (itemId) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.delete('/api/removeCartItem', {
        headers: { Authorization: `Bearer ${token}` },
        data: { itemId },
      });

      if (response.data.success) {
        setCartItems(prevItems => prevItems.filter(item => item._id !== itemId));
      } else if (response.data.error === 'TokenExpired') {
        handleTokenExpiration();
      } else {
        setError(response.data.message);
      }
    } catch (error) {
      if (error.response && error.response.status === 401) {
        handleTokenExpiration();
      } else {
        console.error('Error removing cart item:', error);
        setError('Error removing cart item');
      }
    }
  };

  const handleTokenExpiration = () => {
    localStorage.removeItem('token');
    setIsLoggedIn(false);
    setShowLogin(true);
  };

  const incrementQuantity = (itemId, currentQuantity) => {
    updateCartItem(itemId, currentQuantity + 1);
  };

  const decrementQuantity = (itemId, currentQuantity) => {
    if (currentQuantity > 1) {
      updateCartItem(itemId, currentQuantity - 1);
    } else {
      handleRemoveClick(itemId);
    }
  };

  const subtotal = cartItems.reduce((total, item) => {
    if (item.foodId) {
      const originalPrice = item.foodId.price;
      const discountAmount = originalPrice * (item.foodId.discount / 100);
     // const gstAmount = discountAmount * (item.foodId.gstRate / 100);
      const priceWithGst = originalPrice - discountAmount;
      const pricewithless=originalPrice-priceWithGst
      const itemTotal = pricewithless * item.quantity;
      return total + itemTotal;
    }
    return total;
  }, 0);


  const totalGst = cartItems.reduce((total, item) => {
    if (item.foodId) {
      const originalPrice = item.foodId.price;
      const discountAmount = originalPrice *(1 - (item.foodId.discount / 100));
      const gstAmount = discountAmount * (item.foodId.gstRate / 100);
       
      return total +gstAmount;
    }
    return total;
  }, 0);

  const subtotalWithD = cartItems.reduce((total, item) => {
    if (item.foodId) {
      const originalPrice = item.foodId.price*item.quantity;

      return total + originalPrice;
    }
    return total;
  }, 0);

   
 


 
  // Check if the coupon is valid based on subtotal
  const couponAvailable = appliedCoupon && subtotalWithD >= appliedCoupon.cartPrice;

  // Auto-remove coupon if subtotal is below the required cart price
  useEffect(() => {
    if (appliedCoupon && subtotalWithD < appliedCoupon.cartPrice) {
      setAppliedCoupon(null);
    }
  }, [subtotalWithD, appliedCoupon]);

  const deliveryFee = 2;
  const total = subtotalWithD + deliveryFee;


  
  const handleCheckoutClick = () => {
    if (cartItems.length === 0) {
      setError('Please add items to the cart before proceeding to checkout.');
    } else {
      router.push('/Order');
    }
  };
  
  
  return (
    <>
      {showLogin && !isLoggedIn && (
        <LoginPopup setShowLogin={setShowLogin} setIsLoggedIn={setIsLoggedIn} />
      )}
      <div className='app'>
        <div className="navbar-fixed">
          <Navbar 
            isLoggedIn={isLoggedIn} 
            setShowLogin={setShowLogin} 
            handleLogout={handleLogout} 
          />
        </div>
        <div className="cart-page">
          <div className="back-arrow">
            <FontAwesomeIcon 
              icon={faArrowLeft} 
              className="back-arrow-icon" 
              onClick={() => router.back()} 
            />
          </div>
          <div className='cart-container'>
            <div className='cart-header'></div>
            <div className='cart-body'>
              <div className='cart-header1'>
                <span>Item</span>
                <span>Title</span>
                <span>Price</span>
                <span>Quantity</span>
                <span>Tax</span>
                 <span>Total</span> 
                <span>Remove</span>
               
              </div>
              <div className='cart-items-container'>
                {error && <p className='error-message'>{error}</p>}
                {cartItems.length === 0 ? (
                  <p>Your cart is empty</p>
                ) : (
                  cartItems.map(item => (
                    <div key={item._id} className='cart-item'>
                      <div className='cart-item-img'>
                        {item.foodId && (
                          <img src={item.foodId.imageUrl} alt={item.foodId.name} className='item-image' />
                        )}
                      </div>
                      <div className='cart-item-details'>
                        <h3>{item.foodId ? item.foodId.name : 'Unknown Item'}</h3>
                      </div>
                      <div className='cart-item-price'>
                      <p>₹{item.foodId ? item.foodId.price - (item.foodId.price * (item.foodId.discount / 100)) : 'N/A'}</p>

                      </div>
                      
                      <div className='cart-item-quantity'>
                        <button onClick={() => decrementQuantity(item._id, item.quantity)}>-</button>
                        <p>{item.quantity}</p>
                        <button onClick={() => incrementQuantity(item._id, item.quantity)}>+</button>
                      </div>
                      <div className='cart-item-price'>
                        <p>{item.foodId ? item.foodId.gstRate : 'N/A'}%</p>
                      </div>
                       <div className='cart-item-total'>
                       <p>
  ₹
  {item.foodId 
    ? (item.foodId.price - (item.foodId.price * (item.foodId.discount / 100))) * item.quantity 
    : 'N/A'
  }
</p>

                      </div> 
                      <div className='cart-item-remove'>
                        <img
                          src='/cross_icon.png'
                          alt='Remove'
                          onClick={() => handleRemoveClick(item._id)}
                          className='remove-icon'
                        />
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
            <div className='cart-bottom'>
              <div className='cart-total'>
                <h2>Cart Total</h2>
                <div className='cart-total-details'>
                  <p>Subtotal</p>
                  <p>₹{Math.round(subtotalWithD)}</p>
              
                </div>
                <hr />
                {subtotal > 0 && (
  <>
    <div className='cart-total-details'>
      <p>Item Discount</p>
      <p>-₹{Math.round(subtotal)}</p>
    </div>
    <hr />
  </>
)}

                
               
                {appliedCoupon && (
  <>
    <div className='cart-total-details'>
      <p>Coupon Discount</p>
      <p>
        -₹{
          Math.min(
            Math.round(subtotalWithD * appliedCoupon.rate / 100),
            appliedCoupon.maxDiscount
          )
        }
      </p>
    </div>
    <hr />
  </>
)}
                <div className='cart-total-details'>
                  <p>Delivery Fee</p>
                  <p>+₹{Math.round(deliveryFee)}</p>
                 
                </div>
                <hr/>
                {totalGst > 0 && (
  <>
    <div className='cart-total-details'>
      <p>GST</p>
      <p>+₹{Math.round(totalGst)}</p>
    </div>
    <hr />
  </>
)}


                 
               
                <div className='cart-total-details'>
                  <b>Total</b>
                  <b>₹{
                   Math.round(subtotalWithD) -
                   Math.round(subtotal) - 
                   (appliedCoupon ? Math.round(subtotalWithD * appliedCoupon.rate / 100) : 0 )+ 
                    Math.round(deliveryFee)+ 
                     Math.round(totalGst)
                     }</b>

               
                </div>
                <div className="checkout-button">
                {error && <div className="error-message">{error}</div>}
      <button onClick={handleCheckoutClick} disabled={loading}>
      {loading ? 'Processing...' : 'Proceed to Checkout'.toUpperCase()}
      </button>
                </div>
              </div>
              <div className='cart-promocode'>
                <div>
                  <p>If you want promo code list, enter it here:</p>
                  <div className='cart-promocode-input'>
  {appliedCoupon ? (
    <>
      <input
        type='text'
        value={appliedCoupon.code}
        placeholder='Promo code'
        readOnly // Prevent editing the applied code
      />
      <img
        src='/cross_icon.png'
        alt='Remove'
        onClick={() => setAppliedCoupon(null)} // Remove the coupon
        className='remove-icon'
      />
    </>
  ) : (
    <input
      type='text'
      placeholder='Enter promo code'
      onClick={handlePromoClick} // Open promo code popup if needed
    />
  )}
  <button >Apply Coupon</button>
</div>
                </div>
              </div>
            </div>
          </div>
        </div>
       
      </div>
      <Footer />
      <PromoCodePopup 
        isVisible={showPromoPopup} 
        onClose={() => setShowPromoPopup(false)} 
        onApplyCoupon={handleApplyCoupon} 
        subtotal={subtotalWithD} // Pass subtotal here
      />
    </>
  );
};

export default CartPage;
