import React, { useEffect, useState } from 'react';
import axios from 'axios';
import './orderpayment.css';
import { useRouter } from 'next/router';

const OrderPayment = ({ cartItems = [], totalAmount, selectedAddress, userId }) => {
  const [payments, setPayments] = useState([]);
  const [selectedOption, setSelectedOption] = useState('');
  const [inputValue, setInputValue] = useState('');
  const [errorMessage, setErrorMessage] = useState('');
  const [error, setError] = useState('');
  const [token, setToken] = useState('');

  const router = useRouter();

  useEffect(() => {
    const fetchPayments = async () => {
      try {
        const response = await axios.get('/api/paymentshow');
        if (response.data.success) {
          setPayments(response.data.data || []);
        } else {
          console.error('Failed to fetch payment methods:', response.data.message);
        }
      } catch (error) {
        console.error('Error fetching payment methods:', error.message);
      }
    };

    fetchPayments();

    if (typeof window !== 'undefined') {
      const localStorageToken = localStorage.getItem('token');
      setToken(localStorageToken || '');
    }
  }, []);

  const handleOptionChange = (option) => {
    setSelectedOption(option);
    setInputValue('');
    setErrorMessage('');
  };

  const handleInputChange = (event) => {
    const value = event.target.value;
    if (/^\d*$/.test(value)) {
      setInputValue(value);
      setErrorMessage(''); // Clear any error when valid input is entered
    }
  };

 const handleSubmit = async (event) => {
  event.preventDefault();

  // Existing checks...

  try {
    // Step 1: Submit the order
    const orderResponse = await axios.post('/api/order', {
      token,
      paymentMethod: selectedOption,
      UTR: selectedOption === 'CashOnDelivery' ? null : inputValue,
    });

    if (orderResponse.data.success) {
      // Step 2: Update coupon status in carttotal table
      const couponResponse = await axios.post('/api/couponstatusupdate', {
        token, // Pass the user token here
        couponStatus: 'active', // Set the coupon status to 'active'
      });

      if (couponResponse.data.success) {
        // Navigate to the MyOrder page if the update was successful
        router.push('/MyOrder');
      } else {
        // Handle the error if the coupon status update failed
        setError(couponResponse.data.message || 'Failed to update coupon status.');
      }
    } else {
      // Handle the order submission error
      setError(orderResponse.data.message || 'Failed to place the order.');
    }
  } catch (error) {
    // Handle unexpected errors
    console.error('Error during submission:', error);
    setError('An unexpected error occurred. Please try again later.');
  }
};

  

  return (
    <div className='order-payment-wrapper'>
      <div className='order-payment-container'>
        <div className='column options-column'>
          <h1>Payment Options</h1>
          <div className='options-list'>
            {payments.length > 0 ? (
              payments.map((payment) => (
                <div
                  key={payment._id}
                  className={`option-item ${selectedOption === payment.title ? 'selected' : ''}`}
                  onClick={() => handleOptionChange(payment.title)}
                >
                  <div className='circle'></div>
                  <span>{payment.title}</span>
                </div>
              ))
            ) : (
              <p>Loading...</p>
            )}
            <div
              className={`option-item ${selectedOption === 'CashOnDelivery' ? 'selected' : ''}`}
              onClick={() => handleOptionChange('CashOnDelivery')}
            >
              <div className='circle'></div>
              <span>Cash on Delivery</span>
            </div>
          </div>
        </div>

        <div className='column details-column'>
          {selectedOption && (
            <div className='details-content'>
              {selectedOption === 'CashOnDelivery' ? (
                <div className='cash-on-delivery'>
                  <p>Selected Cash on Delivery. You can proceed to submit.</p>
                </div>
              ) : (
                payments
                  .filter(payment => payment.title === selectedOption)
                  .map(payment => (
                    <div key={payment._id} className='payment-details'>
                      <img src={payment.imageUrl} alt={payment.title} className='payment-image' />
                      <div className='download'>
                        <a
                          href={payment.imageUrl}
                          download={`${payment.title}.png`}
                          className='download-link'
                        >
                          Download QR
                        </a>
                      </div>
                      <p>{payment.name}</p>
                      <label>
                        <input
                          type='text'
                          value={inputValue}
                          onChange={handleInputChange}
                          placeholder='Enter UTR 12-digit here'
                          className={`payment-input ${errorMessage ? 'input-error' : ''}`}
                          maxLength={12}
                          required
                        />
                      </label>
                      {errorMessage && <p className='error-message'>{errorMessage}</p>}
                    </div>
                  ))
              )}
            </div>
          )}
          {selectedOption && (
            <button onClick={handleSubmit} className='submit-button'>
              Submit
            </button>
          )}
          {error && <p className='error-message'>{error}</p>}
        </div>
      </div>
    </div>
  );
};

export default OrderPayment;
